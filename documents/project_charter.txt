Project Charter - Sistema de Análise da Câmara dos Deputados
1. Visão do Projeto
Desenvolver uma solução de IA que processe e analise dados da Câmara dos Deputados do Brasil, fornecendo insights através de processamento de texto e imagem, com componentes offline e online integrados.

2. Objetivos
Coletar e processar dados da API da Câmara dos Deputados
Gerar análises e insights usando LLMs
Criar uma interface interativa para visualização dos dados
Implementar um assistente virtual especializado
Gerar visualizações e análises de proposições legislativas
3. Escopo
Dentro do Escopo:

Coleta de dados do período 01/08/2024 a 30/08/2024
Processamento de dados de:
Deputados atuais
Despesas
Proposições (temas: Economia, Educação, Ciência/Tecnologia)
Dashboard interativo com 3 abas
Base vetorial para consultas
Geração de imagens para proposições
Análises com múltiplos LLMs
Fora do Escopo:

Dados históricos fora do período especificado
Processamento de vídeos ou áudios
Análise de redes sociais dos deputados
Integração com outros sistemas governamentais
4. Deliverables
Módulo de Processamento (dataprep.py):
Coleta de dados via API
Análises e sumarizações
Bases vetoriais
Arquivos processados (parquet, json, yaml)
Interface do Usuário (dashboard.py):
Dashboard Streamlit
Visualizações interativas
Chat assistente
Gráficos e insights
5. Cronograma de Alto Nível
Fase 1: Configuração e Coleta
Estruturação do projeto
Implementação da coleta de dados
Fase 2: Processamento
Análises com LLMs
Geração de insights
Criação de bases vetoriais
Fase 3: Visualização
Desenvolvimento do dashboard
Implementação do assistente virtual
Geração de imagens
Fase 4: Testes e Documentação
Testes de funcionalidade
Documentação do código
Otimizações finais
6. Riscos Iniciais
Técnicos:
Instabilidade da API da Câmara
Limitações das APIs dos LLMs
Performance com grandes volumes de dados
Funcionais:
Qualidade das sumarizações
Precisão das análises
Relevância dos insights gerados
7. Requisitos Técnicos
Python 3.x
Chave API Gemini
Bibliotecas: Streamlit, FAISS, transformers
Armazenamento para bases vetoriais
Capacidade de processamento para LLMs
8. Critérios de Sucesso
Coleta bem-sucedida de todos os dados necessários
Geração de insights relevantes e precisos
Dashboard funcional e responsivo
Assistente virtual com respostas precisas
Documentação clara e completa

T_eng_prompt_local/ ├── src/ # Código fonte │ ├── dataprep.py # Processamento offline │ ├── dashboard.py # Interface do usuário │ └── config.py # Configurações globais ├── data/ # Dados do sistema │ ├── raw/ # Dados brutos da API │ ├── processed/ # Dados processados │ ├── embeddings/ # Base vetorial FAISS │ ├── images/ # Imagens geradas │ └── config.yaml # Configurações do sistema ├── docs/ # Documentação │ ├── project_charter.txt │ ├── arquitetura_do_sistema.txt │ └── images/ ├── tests/ # Testes unitários ├── requirements.txt # Dependências ├── .env # Variáveis de ambiente └── README.md # Documentação principal


Esta estrutura foi organizada para:
- Separar claramente código fonte, dados e documentação
- Manter dados sensíveis fora do controle de versão
- Facilitar o desenvolvimento e testes
- Organizar os diferentes tipos de dados processados
- Manter a documentação acessível e organizada

