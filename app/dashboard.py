"""
M√≥dulo principal do dashboard
"""

import streamlit as st
from pathlib import Path
import logging
import sys
import os
import pandas as pd
import plotly.express as px
from datetime import datetime
import json

# Adiciona o diret√≥rio raiz ao PYTHONPATH
root_dir = str(Path(__file__).parent.parent)
sys.path.insert(0, root_dir)

from app.utils.data_loader import DataLoader
from app.utils.formatters import format_currency, format_percentage
from app.utils.visualizations import Visualizer
from app.config.logging_config import setup_logging

# Configura√ß√£o de logging
setup_logging()
logger = logging.getLogger(__name__)

class Dashboard:
    """Classe principal do dashboard"""
    
    def __init__(self):
        """Inicializa o dashboard"""
        try:
            self.load_data()
            self.setup_page()
        except Exception as e:
            logger.error(f"Erro ao inicializar o dashboard: {str(e)}")
            st.error("Erro ao inicializar o dashboard.")

    def setup_page(self):
        """Configura a p√°gina do Streamlit"""
        st.set_page_config(
            page_title="Dashboard - An√°lise de Deputados",
            page_icon="üìä",
            layout="wide"
        )
        st.title("Dashboard - An√°lise de Deputados")

    def load_data(self):
        """Carrega os dados necess√°rios para o dashboard"""
        try:
            # Carrega os dados de despesas
            self.serie_despesas = pd.read_parquet(os.path.join(root_dir, 'data/processed/serie_despesas_diarias_deputados.parquet'))
            self.serie_despesas = self.serie_despesas.rename(columns={
                'dataDocumento': 'data',
                'nomeDeputado': 'nome',
                'valorDocumento': 'valor'
            })
            self.deputados = sorted(self.serie_despesas['nome'].unique().tolist())
            
            # Carrega os insights de despesas
            with open(os.path.join(root_dir, 'data/processed/insights_despesas_deputados.json'), 'r', encoding='utf-8') as f:
                self.insights_despesas = json.load(f)
            
            # Carrega os dados de proposi√ß√µes
            self.proposicoes = pd.read_parquet(os.path.join(root_dir, 'data/processed/proposicoes_deputados.parquet'))
            
            # Carrega a sumariza√ß√£o das proposi√ß√µes
            with open(os.path.join(root_dir, 'data/processed/sumarizacao_proposicoes.json'), 'r', encoding='utf-8') as f:
                self.sumarizacao = json.load(f)
                
        except Exception as e:
            logger.error(f"Erro ao carregar dados: {str(e)}")
            raise

    def render_aba_visao_geral(self):
        """Renderiza a aba de vis√£o geral"""
        try:
            st.header("Vis√£o Geral da C√¢mara dos Deputados")
            
            # Adiciona a descri√ß√£o
            with st.expander("Sobre a C√¢mara dos Deputados", expanded=True):
                st.markdown("""
                A C√¢mara dos Deputados √© uma das casas do Congresso Nacional do Brasil. 
                Ela √© composta por representantes do povo, eleitos pelo sistema proporcional 
                em cada estado, territ√≥rio e no Distrito Federal. Este dashboard apresenta 
                an√°lises sobre as atividades dos deputados, incluindo suas despesas e proposi√ß√µes.
                """)
            
            # Se√ß√£o de Insights
            st.header("Insights Principais")
            self.render_insights()
            
            # M√©tricas principais
            st.header("M√©tricas Principais")
            
            # Calcula m√©tricas
            total_deputados = len(self.deputados)
            media_gastos = self.serie_despesas['valor'].mean() if not self.serie_despesas.empty else 0
            total_proposicoes = len(self.proposicoes) if hasattr(self, 'proposicoes') else 0
            
            # Exibe m√©tricas em colunas
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total de Deputados", f"{total_deputados:,}")
            with col2:
                st.metric("M√©dia de Gastos", format_currency(media_gastos))
            with col3:
                st.metric("Total de Proposi√ß√µes", f"{total_proposicoes:,}")
            
            # Distribui√ß√£o por partido
            st.subheader("Distribui√ß√£o por Partido")
            self.plot_distribuicao_partidos_from_data()
                
        except Exception as e:
            logger.error(f"Erro ao renderizar vis√£o geral: {str(e)}")
            st.error("Erro ao renderizar vis√£o geral.")

    def plot_distribuicao_partidos_from_data(self):
        """Gera gr√°fico de distribui√ß√£o por partido usando os dados dispon√≠veis"""
        try:
            # Usa os dados de despesas para obter a distribui√ß√£o por partido
            if hasattr(self, 'serie_despesas') and not self.serie_despesas.empty and 'partido' in self.serie_despesas.columns:
                distribuicao = self.serie_despesas.groupby('partido').size().reset_index()
                distribuicao.columns = ['Partido', 'Quantidade']
                distribuicao = distribuicao.sort_values('Quantidade', ascending=False)
                
                # Gera o gr√°fico
                fig = px.bar(
                    distribuicao,
                    x='Partido',
                    y='Quantidade',
                    title='Distribui√ß√£o de Deputados por Partido',
                    labels={'Partido': 'Partido', 'Quantidade': 'Quantidade de Deputados'}
                )
                fig.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("Dados de distribui√ß√£o por partido n√£o dispon√≠veis")
            
        except Exception as e:
            logger.error(f"Erro ao gerar gr√°fico de distribui√ß√£o por partido: {str(e)}")
            st.error("Erro ao gerar o gr√°fico de distribui√ß√£o por partido.")

    def render_insights(self):
        """Renderiza os insights gerados"""
        try:
            with open(os.path.join(root_dir, 'data/processed/insights_distribuicao_deputados.json'), 'r', encoding='utf-8') as f:
                data = json.load(f)
                insights = data.get('insights', [])
            
            for insight in insights:
                st.markdown(f"‚Ä¢ {insight}")
                
        except Exception as e:
            logger.error(f"Erro ao renderizar insights: {str(e)}")
            st.error("N√£o foi poss√≠vel carregar os insights.")

    def render_aba_despesas(self):
        """Renderiza a aba de Despesas"""
        try:
            st.header("An√°lise de Despesas")
            
            # Exibe insights de despesas
            st.subheader("Insights sobre Despesas")
            insights_text = self.insights_despesas.get('insights', '')
            st.markdown(insights_text)
            
            # An√°lise dos Top 10 Deputados
            st.subheader("Top 10 Deputados com Maiores Gastos")
            if 'analises' in self.insights_despesas and 'top_10_deputados' in self.insights_despesas['analises']:
                top_10 = self.insights_despesas['analises']['top_10_deputados']
                
                # Criar DataFrame para visualiza√ß√£o
                top_10_df = pd.DataFrame({
                    'Deputado': list(top_10['valores'].keys()),
                    'Valor': list(top_10['valores'].values()),
                    'Partido': [top_10['partidos'].get(dep, 'N/A') for dep in top_10['valores'].keys()]
                })
                
                # Gr√°fico de barras dos top 10
                fig_top10 = px.bar(
                    top_10_df,
                    x='Deputado',
                    y='Valor',
                    color='Partido',
                    title='Top 10 Deputados por Valor de Despesas',
                    labels={'Valor': 'Valor Total (R$)'}
                )
                fig_top10.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig_top10, use_container_width=True)
            
            # Sele√ß√£o de deputado individual
            st.subheader("An√°lise Individual de Deputado")
            if hasattr(self, 'deputados') and self.deputados:
                col1, col2 = st.columns([1, 2])
                with col1:
                    deputado_selecionado = st.selectbox(
                        "Selecione um Deputado para An√°lise",
                        options=["Selecione um deputado..."] + self.deputados,
                        index=0
                    )
                
                if deputado_selecionado and deputado_selecionado != "Selecione um deputado...":
                    fig_temporal, fig_tipo = self.plot_despesas_deputado(deputado_selecionado)
                    if fig_temporal is not None and fig_tipo is not None:
                        st.plotly_chart(fig_temporal, use_container_width=True)
                        st.plotly_chart(fig_tipo, use_container_width=True)
                        
                        # Estat√≠sticas do deputado
                        dados_deputado = self.serie_despesas[self.serie_despesas['nome'] == deputado_selecionado]
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Total de Despesas", 
                                     format_currency(dados_deputado['valor'].sum()))
                        with col2:
                            st.metric("M√©dia Mensal", 
                                     format_currency(dados_deputado['valor'].mean()))
                        with col3:
                            st.metric("N√∫mero de Despesas", 
                                     f"{len(dados_deputado):,}")
            else:
                st.warning("Lista de deputados n√£o dispon√≠vel")
                    
        except Exception as e:
            logger.error(f"Erro ao renderizar aba de despesas: {str(e)}")
            st.error("Erro ao renderizar aba de despesas.")

    def plot_despesas_deputado(self, deputado):
        """Gera gr√°fico de despesas para um deputado espec√≠fico"""
        try:
            dados_deputado = self.serie_despesas[self.serie_despesas['nome'] == deputado]
            if dados_deputado.empty:
                st.warning(f"N√£o foram encontradas despesas para o deputado {deputado}")
                return None, None
            
            # Gr√°fico de linha temporal
            fig_temporal = px.line(
                dados_deputado,
                x='data',
                y='valor',
                title=f'Evolu√ß√£o das Despesas de {deputado}',
                labels={'data': 'Data', 'valor': 'Valor (R$)'}
            )
            
            # Gr√°fico de barras por tipo de despesa
            fig_tipo = px.bar(
                dados_deputado.groupby('tipoDespesa')['valor'].sum().reset_index(),
                x='tipoDespesa',
                y='valor',
                title=f'Despesas por Categoria - {deputado}',
                labels={'tipoDespesa': 'Tipo de Despesa', 'valor': 'Valor Total (R$)'}
            )
            fig_tipo.update_layout(xaxis_tickangle=-45)
            
            return fig_temporal, fig_tipo
            
        except Exception as e:
            logger.error(f"Erro ao gerar gr√°fico: {str(e)}")
            st.error("Erro ao gerar o gr√°fico de despesas.")
            return None, None

    def render_aba_proposicoes(self):
        """Renderiza a aba de Proposi√ß√µes"""
        try:
            st.header("An√°lise de Proposi√ß√µes")
            
            # Exibe resumo das proposi√ß√µes por tema
            st.subheader("Resumo por Tema")
            if hasattr(self, 'sumarizacao'):
                for tema in self.sumarizacao.get('sumarizacoes_por_tema', []):
                    with st.expander(f"{tema['tema']} ({tema['quantidade_proposicoes']} proposi√ß√µes)"):
                        st.markdown(tema['sumarizacao'])
            
            # Exibe tabela de proposi√ß√µes com filtros
            st.subheader("Tabela de Proposi√ß√µes")
            if hasattr(self, 'proposicoes') and not self.proposicoes.empty:
                try:
                    # Verifica as colunas dispon√≠veis
                    colunas_disponiveis = self.proposicoes.columns.tolist()
                    logger.info(f"Colunas dispon√≠veis nas proposi√ß√µes: {colunas_disponiveis}")
                    
                    # Adiciona filtros apenas para colunas que existem
                    col1, col2 = st.columns(2)
                    
                    tema_filtro = []
                    if 'tema' in colunas_disponiveis:
                        with col1:
                            temas_disponiveis = sorted(self.proposicoes['tema'].unique().tolist())
                            tema_filtro = st.multiselect(
                                "Filtrar por Tema",
                                options=temas_disponiveis,
                                placeholder="Selecione os temas..."
                            )
                    
                    situacao_filtro = []
                    if 'situacao' in colunas_disponiveis:  # Mudamos de 'status' para 'situacao'
                        with col2:
                            situacoes_disponiveis = sorted(self.proposicoes['situacao'].unique().tolist())
                            situacao_filtro = st.multiselect(
                                "Filtrar por Situa√ß√£o",
                                options=situacoes_disponiveis,
                                placeholder="Selecione as situa√ß√µes..."
                            )
                    
                    # Aplica filtros
                    df_filtrado = self.proposicoes.copy()
                    if tema_filtro and 'tema' in colunas_disponiveis:
                        df_filtrado = df_filtrado[df_filtrado['tema'].isin(tema_filtro)]
                    if situacao_filtro and 'situacao' in colunas_disponiveis:
                        df_filtrado = df_filtrado[df_filtrado['situacao'].isin(situacao_filtro)]
                    
                    # Mostra estat√≠sticas
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Total de Proposi√ß√µes", f"{len(df_filtrado):,}")
                    with col2:
                        if 'tema' in colunas_disponiveis:
                            st.metric("Temas √önicos", f"{df_filtrado['tema'].nunique():,}")
                    with col3:
                        if 'situacao' in colunas_disponiveis:
                            st.metric("Situa√ß√µes √önicas", f"{df_filtrado['situacao'].nunique():,}")
                    
                    # Configura as colunas para exibi√ß√£o
                    column_config = {}
                    for col in colunas_disponiveis:
                        # Mapeia os nomes das colunas para portugu√™s
                        column_map = {
                            'tema': 'Tema',
                            'situacao': 'Situa√ß√£o',
                            'data': 'Data',
                            'autor': 'Autor',
                            'ementa': 'Ementa',
                            'tipo': 'Tipo',
                            'numero': 'N√∫mero'
                        }
                        if col in column_map:
                            column_config[col] = column_map[col]
                    
                    # Exibe a tabela filtrada
                    st.dataframe(
                        df_filtrado,
                        column_config=column_config,
                        hide_index=True
                    )
                    
                    # Adiciona visualiza√ß√µes se houver dados
                    if not df_filtrado.empty:
                        col1, col2 = st.columns(2)
                        
                        # Gr√°fico por tema
                        if 'tema' in colunas_disponiveis:
                            with col1:
                                contagem_temas = df_filtrado['tema'].value_counts()
                                fig_tema = px.pie(
                                    values=contagem_temas.values,
                                    names=contagem_temas.index,
                                    title='Distribui√ß√£o por Tema'
                                )
                                st.plotly_chart(fig_tema, use_container_width=True)
                        
                        # Gr√°fico por situa√ß√£o
                        if 'situacao' in colunas_disponiveis:
                            with col2:
                                contagem_situacao = df_filtrado['situacao'].value_counts()
                                fig_situacao = px.bar(
                                    x=contagem_situacao.index,
                                    y=contagem_situacao.values,
                                    title='Quantidade por Situa√ß√£o',
                                    labels={'x': 'Situa√ß√£o', 'y': 'Quantidade'}
                                )
                                fig_situacao.update_layout(xaxis_tickangle=-45)
                                st.plotly_chart(fig_situacao, use_container_width=True)
                    else:
                        st.info("Nenhum dado encontrado para os filtros selecionados")
                        
                except Exception as e:
                    logger.error(f"Erro ao processar dados de proposi√ß√µes: {str(e)}")
                    st.error("Erro ao processar dados de proposi√ß√µes.")
            else:
                st.warning("Dados de proposi√ß√µes n√£o dispon√≠veis")
                
        except Exception as e:
            logger.error(f"Erro ao renderizar aba de proposi√ß√µes: {str(e)}")
            st.error("Erro ao renderizar aba de proposi√ß√µes.")

    def run(self):
        """Executa o dashboard"""
        try:
            # Cria√ß√£o das abas
            tab_visao_geral, tab_despesas, tab_proposicoes = st.tabs([
                "Vis√£o Geral",
                "Despesas",
                "Proposi√ß√µes"
            ])

            # Renderiza cada aba
            with tab_visao_geral:
                self.render_aba_visao_geral()
            
            with tab_despesas:
                self.render_aba_despesas()
            
            with tab_proposicoes:
                self.render_aba_proposicoes()
                
        except Exception as e:
            logger.error(f"Erro ao executar o dashboard: {str(e)}")
            st.error("Erro ao executar o dashboard.")

if __name__ == "__main__":
    dashboard = Dashboard()
    dashboard.run()
