"""
M√≥dulo principal do dashboard
"""

import streamlit as st
from pathlib import Path
import logging
import sys
import os

# Adiciona o diret√≥rio raiz ao PYTHONPATH
root_dir = str(Path(__file__).parent.parent)
sys.path.insert(0, root_dir)

from app.utils.data_loader import DataLoader
from app.utils.formatters import format_currency, format_percentage
from app.config.logging_config import setup_logging

# Configura√ß√£o de logging
setup_logging()
logger = logging.getLogger(__name__)

def initialize_session_state():
    """Inicializa o estado da sess√£o do Streamlit"""
    if 'page' not in st.session_state:
        st.session_state.page = 'Vis√£o Geral'
    if 'data_loaded' not in st.session_state:
        st.session_state.data_loaded = False
    if 'error_message' not in st.session_state:
        st.session_state.error_message = None

class Dashboard:
    """Classe principal do dashboard"""
    
    def __init__(self):
        self.setup_page()
        try:
            self.data_loader = DataLoader(data_dir="data")
            if not st.session_state.data_loaded:
                self.load_data()
                st.session_state.data_loaded = True
        except Exception as e:
            logger.error(f"Erro na inicializa√ß√£o: {str(e)}")
            st.error("Erro ao inicializar o dashboard. Por favor, verifique os logs.")
    
    def setup_page(self):
        """Configura a p√°gina do Streamlit"""
        st.set_page_config(
            page_title="Dashboard C√¢mara dos Deputados",
            page_icon="üèõÔ∏è",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        
    def load_data(self):
        """Carrega os dados necess√°rios"""
        try:
            self.config = self.data_loader.load_config()
            self.insights = self.data_loader.load_insights()
            st.session_state.error_message = None
            logger.info("Dados carregados com sucesso")
        except Exception as e:
            error_msg = f"Erro ao carregar dados: {str(e)}"
            logger.error(error_msg)
            st.session_state.error_message = error_msg
            raise
    
    def render_sidebar(self):
        """Renderiza a barra lateral"""
        with st.sidebar:
            st.title("Navega√ß√£o")
            st.radio(
                "Escolha uma p√°gina",
                ["Vis√£o Geral", "Despesas", "Proposi√ß√µes"],
                key="page"
            )
    
    def render_overview(self):
        """Renderiza a p√°gina de vis√£o geral"""
        st.title("Vis√£o Geral da C√¢mara dos Deputados")
        
        # M√©tricas principais
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_deputados = self.insights[0].get("total_deputados", 0)
            st.metric("Total de Deputados", total_deputados)
            
        with col2:
            media_gastos = self.insights[0].get("media_gastos", 0)
            st.metric("M√©dia de Gastos", format_currency(media_gastos))
            
        with col3:
            total_proposicoes = self.insights[0].get("total_proposicoes", 0)
            st.metric("Total de Proposi√ß√µes", total_proposicoes)
        
        # Distribui√ß√£o por partido
        st.subheader("Distribui√ß√£o por Partido")
        distribuicao_path = self.data_loader.get_image_path("distribuicao_partidos.png")
        if distribuicao_path:
            st.image(str(distribuicao_path), use_column_width=True)
        else:
            st.warning("Imagem de distribui√ß√£o n√£o encontrada")
    
    def render_expenses(self):
        """Renderiza a p√°gina de despesas"""
        st.title("An√°lise de Despesas")
        st.info("Em desenvolvimento")
    
    def render_propositions(self):
        """Renderiza a p√°gina de proposi√ß√µes"""
        st.title("An√°lise de Proposi√ß√µes")
        st.info("Em desenvolvimento")
    
    def render(self):
        """Renderiza o dashboard"""
        self.render_sidebar()
        
        if st.session_state.page == "Vis√£o Geral":
            self.render_overview()
        elif st.session_state.page == "Despesas":
            self.render_expenses()
        elif st.session_state.page == "Proposi√ß√µes":
            self.render_propositions()

def main():
    """Fun√ß√£o principal do dashboard"""
    try:
        initialize_session_state()
        dashboard = Dashboard()
        
        if st.session_state.error_message:
            st.error(st.session_state.error_message)
            return

        dashboard.render_sidebar()
        
        # Renderiza a p√°gina selecionada
        if st.session_state.page == "Vis√£o Geral":
            dashboard.render_overview()
        elif st.session_state.page == "Despesas":
            dashboard.render_expenses()
        elif st.session_state.page == "Proposi√ß√µes":
            dashboard.render_propositions()
            
    except Exception as e:
        logger.error(f"Erro fatal: {str(e)}")
        st.error("Ocorreu um erro inesperado. Por favor, recarregue a p√°gina ou contate o suporte.")

if __name__ == "__main__":
    main()
